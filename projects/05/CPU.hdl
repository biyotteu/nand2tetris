// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Or16(a=instruction,b=false,out=test1234,out[15]=asdf);
    Mux16(a=instruction,b=aluOut,sel=instruction[15],out=instructMux);
    Not(in=instruction[15],out=instructCode);
    And(a=instruction[15],b=instruction[5],out=saveARegister);
    Or(a=instructCode,b=saveARegister,out=loadAregister);
    ARegister(in=instructMux,load=loadAregister,out=ARegisterOut,out[0..14]=addressM,out=pcIn);

    Mux16(a=false,b=instruction,sel=instruction[15],out=ins);

    Mux16(a=ARegisterOut,b=inM,sel=instruction[12],out=aluIn);

    DRegister(in=aluOut,load=instruction[4],out=DRegisterOut);

    ALU(x=DRegisterOut,y=aluIn,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOut,zr=zr,ng=ng);

    Mux16(a=false,b=aluOut,sel=isWrite,out=outM);

    And(a=instruction[3],b=instruction[15],out=writeM, out=isWrite);

    Or16(a=aluOut,b=false,out[0..7]=leftData,out[8..15]=rightData);
    Or8Way(in=leftData,out=leftSum);
    Or8Way(in=rightData,out=rightSum);
    Or(a=leftSum,b=rightSum,out=sum);

    Not16(in=aluOut,out[15]=isPositive);
    And(a=isPositive,b=sum,out=positive);
    
    Not(in=sum,out=isZero);

    Or(a=positive,b=isZero,out=positiveAndZero);

    Or16(a=aluOut,b=false,out[15]=isNegative);

    Or16(a[15]=sum,b=aluOut,out[15]=negativeAndZero);


    Mux8Way16(a[0]=false,b[0]=positive,c[0]=isZero,d[0]=positiveAndZero,e[0]=isNegative,f[0]=sum,g[0]=negativeAndZero,h[0]=true,sel=instruction[0..2],out[0]=jump);
    And16(a[15]=jump,b=aluOut,out[15]=isJump);
    Or(a=isJump,b=reset,out=jumpAndReset);
    Not(in=jumpAndReset,out=inc);

    PC(in=ARegisterOut,load=isJump,inc=inc,reset=reset,out[0..14]=pc);
}